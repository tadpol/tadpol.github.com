<?xml version="1.0" encoding="UTF-8"?>
<feed xml:base="http://tadpol.org/feed.atom" xml:lang="en-us" xmlns="http://www.w3.org/2005/Atom">
  <title>Tadpol's bog</title>
  <id>http://tadpol.org/feed.atom</id>
  <link href="feed.atom" rel="self"/>
  <link href="http://tadpol.org" rel="alternate"/>
  <icon>/favicon.ico</icon>
  <updated>2012-04-04T09:06:40-05:00</updated>
  <author>
    <name>Michael Conrad Tadpol Tilstra</name>
  </author>
  <rights>All rights reserved.</rights>
  <generator>WebSpace 0.1 ruby code written by Michael Conrad Tadpol Tilstra</generator>
  <entry xml:base="projects/">
    <title>Avrian Jump</title>
    <link href="AvrianJump.html"/>
    <id>http://tadpol.org/projects/AvrianJump.html</id>
    <published>2012-02-02T10:44:00-06:00</published>
    <updated>2012-04-04T09:06:34-05:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><a href="images/avrianjump.jpg" class="thickbox" rel="projectsAvrianJumphtml"><img src="images/avrianjump-thumb.jpg" height="240" alt="Arduino with Audioino and a MacBook running Safari and Avrian Jump" width="320" /></a></p>

<p>A very simple ladder language for programming ATMega168s from a web browser.</p>

<p>This started out as a desire to be able to program an <a href="http://www.arduino.cc/">Arduino</a> from an iOS device.  Since it
doesn&#8217;t seem like compiler tools of any sort would get into the app store, I figured something
would need to be done in HTML5.  And if a <a href="http://bellard.org/jslinux/">PC emulator</a> could be written in javascript,
so could something like this.</p>

<p>However, recreating the Arduino IDE in HTML seemed like too much work, at least for a first
try.  So I reduced the project into something much simpler, while still putting real machine
code into the AVR&#8217;s flash.  A simple ladder language that compiled into AVR assembly, which
would be assembled into machine code, seemed like like a resonable reduction.  With that I
could take advantage of the <a href="http://www.hobby-roboter.de/forum/viewtopic.php?f=4&amp;t=128&amp;p=531">Audioino</a> bootloader, to load right from the web page.</p>

<h2>Download</h2>

<p><a href="http://github.com/tadpol/Avrian-Jump">Avrian Jump</a> is on <a href="http://github.com/">GitHub</a>, so head over there to
look at it.</p>

<h2>The Ladder</h2>

<p>Each rung on the ladder has a single test and multiple actions.  Tests can check the digital
pins, analog pins, and a couple of variables.  Each action can set a digital pin, a PWM output,
or a variable.  Analog, PWM, and variables are 16bit values.</p>

<p>There is no &#8216;setup()&#8217;.  Analog pins are always analog inputs.  When specified in a test, a
digital pin is set to an input then read.  When specified in an action, it is set to an output
then set.</p>

<p>PWM code is still non-existant, so how this will actually work is up in the air.  How I want it
to work is:  Specifying a pin in an action as a PWM output makes it a PWM output.  Specifying a
pin in a test stops it from doing PWM output.  Specifying a digital state for the pin in an
action also stops it from doing PWM output.</p>

<p>There is an ascii format of the ladders.  This was done because it seemed like it could be neat
to be able to tweet ladders.  You can view the ascii format, and also load ladders from it.
The ascii parser skips anything it doesn&#8217;t recognise; it is a bit too forgiving at times.</p>

<p>An example program:</p>

<pre><code>#Fast Blink LED
:T;A+=1
:A=16383;D13=1
:A=32767;D13=0,A=0
</code></pre>

<p>Mostly though, a ladder is converted into AVR assembly.</p>

<h2>The Assembler</h2>

<p>The assembler is pretty basic. Lots of features commonly found in other assemblers are
currently missing.  It does assemble the mneonics from <a href="http://www.atmel.com/atmel/acrobat/doc0856.pdf">Atmel&#8217;s pdf</a> into machine code.
It supports labels, but not local labels.  It has simple parameter replacement, so common names
can be defined for IO registers and memory regions and things.  It can also specify where in
memory to put the machine code, and can specify immeadiate words to save in the machine code.</p>

<p>This assembler doesn&#8217;t know about the various AVR devices, and so will happily assemble any of
the known mnemonics into the output.  Even if your target device has no idea what to do with
them.  It has assembled blink tests for the ATmega168 and the ATTiny13, so it seems pretty
flexable. (Avrian Jump currently only supports the ATmega168 though.  Maybe add others in the
future, but would have to figure the bootloader thing out first.)</p>

<h2>Outputs</h2>

<p>A ladder can be compiled into a few different formats:</p>

<ul>
<li>ASCII
<ul>
<li>This the only form can can be converted back into a ladder.</li>
<li>This is for sharing your ladder with others, or saving a ladder for later.</li>
</ul></li>
<li>S19
<ul>
<li>If you don&#8217;t have an <a href="http://www.hobby-roboter.de/forum/viewtopic.php?f=4&amp;t=128&amp;p=531">Audioino</a> bootloader, but still want to use a ladder.  A S19 can be
saved as a file, and loaded with <a href="http://ladyada.net/learn/avr/avrdude.html">avrdude</a>.</li>
</ul></li>
<li>WAV
<ul>
<li>A <a href="http://www.hobby-roboter.de/forum/viewtopic.php?f=4&amp;t=128&amp;p=531">Audioino</a> compatible wav file for loading the ladder onto an ATmega168 with the
<a href="http://www.hobby-roboter.de/forum/viewtopic.php?f=4&amp;t=128&amp;p=531">Audioino</a> bootloader installed.</li>
</ul></li>
<li>Assembler
<ul>
<li>This is mostly around for debugging the ladder compiler.  It can be interesting to look at
too.</li>
</ul></li>
</ul>
      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>Tea</title>
    <link href="tea.html"/>
    <id>http://tadpol.org/projects/tea.html</id>
    <published>2012-01-27T13:29:00-06:00</published>
    <updated>2012-01-27T13:39:12-06:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>I&#8217;ve been playing with writing my own little scripting language for a bit now.  To keep it
interesting, I decided it needed to be very small.  The idea being is that I might be able to
use it in some of the micro-controller work I do.  Often it would be nice on those to just do a
little /something/ without having to stop, re-compile, and run.</p>

<p>I&#8217;ve also been a bit bad, and not used revision control.  Hence this is the 18th time I created
a new directory for it.  </p>

<p>I cannot remember why I call it Tea.  There was a reason, I&#8217;m pretty sure, but the name is
stuck.</p>

<p>Also been playing with <a href="http://github.com">github</a>, so its over there if you want to see. 
<a href="http://github.com/tadpol/Tea">Tea18</a></p>
      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>Tadpol's Calculator v3</title>
    <link href="Tadpol_s_Calculator.html"/>
    <id>http://tadpol.org/projects/Tadpol_s_Calculator.html</id>
    <published>2009-01-24T09:07:09-06:00</published>
    <updated>2009-12-22T20:18:12-06:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>There is a saying about dog food and eating it.  So after a bit I started to find my little calculator lacking.  Quite severely in some places; so I gave it a redesign.  Twice.</p>

<p>A quick person will note that this is version 3 and the previous was version 1, thus skipping version 2.  There was a version 2.  It had the same GUI as version 1, but it was a full out RPN.  There were multiple stacks that were named.  Those stacks were also little programs; letting you program the calculator.  It was all very nifty by design.  It was utterly worthless to use.</p>

<p>Version 2 was a key lesson for designing version 3.</p>

<p>As a programmer, the stacks are a very neat concept.  For doing little quick bits of math, they interfere.  The real reason for the stack though, was that your basic calculator only has one extra bit of memory.  I find that too limiting.  I played around and tested a few things and found that I never really used more than three or four memory cells.  So version 3 has five memory cells.</p>

<p>The ability to write little programs for the calc was a neat idea that I never used.  TadpolCalc is written in TCL, it is far easier to just add functions in TCL that any little toy language.  Never mind the detail that it was a feature that never got used.  Version 3 doesn&#8217;t try to have its own programming language.</p>

<p>Version 1 and 2 had broken fixed number modes.  That bug is squished in version 3.</p>

<p>There were a lot of funny key collisions in version 1.  Try entering a hexadecimal number in all caps.  Goes ok until you get to a &#8216;B&#8217;.  Version 3 isn&#8217;t quite as crazy about single key shortcuts.</p>

<p>I aslo finally figured out how to convert a floating point number into hexadecimal.  I&#8217;m mildly ashamed it took me so long.  IEEE defined how to do this, thus that is the way to do it.  (<small>And that one memory dump with floats in it that I needed to decode also helped push the matter.</small>)  Converting floats to hexadecimal and binary actually works in version 3.</p>

<p>So here is my latest version; something I find useful again.  We&#8217;ll see how this one stands after a bit of time.  </p>

<p>Oh, one thing, Control-? for help. (<small>or on most keyboards, Control-Shift-/</small>)</p>

<p>(<small>and yes, I am in fact finding little things to fix already.</small>)</p>

<p>Screenshots:<br />
<img src="images/tc-mac-v3.png" height="123" width="349" />&nbsp;&nbsp;
<!-- img src="/projects/images/tc-win-v3.png" / --></p>

<p>Download:
 - <a href="/projects/archives/tadpolcalc/tadpolcalc-darwin-univ-aqua-v3.zip">Macintosh</a>
 - <a href="/projects/archives/tadpolcalc/tadpolcalc-win32-v3.zip">Windows</a>
 - <a href="/projects/archives/tadpolcalc/tadpolcalc-linux-x86-v3.zip">Linux</a>
 - <a href="/projects/archives/tadpolcalc/tadpolcalc-kit-v3.zip">kit</a></p>
      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>Tadpol's Calculator</title>
    <link href="Tadpol_s_Calculator_v1.html"/>
    <id>http://tadpol.org/projects/Tadpol_s_Calculator_v1.html</id>
    <published>2009-01-24T09:07:09-06:00</published>
    <updated>2009-12-22T19:45:36-06:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>This is a little calculator app I worte up to better fit my needs than a typical default one. It has a few features that I found I wanted.</p>

<p>First thing most noticable is that there are no little gui buttons.  Everything is reachable from the keyboard, so I see no reason to build a bunch of buttons that just get in the way.</p>

<p>It has a stack for memory storage, and is used in completing operations. Even though there is a stack, the calculator is not postfix notation.  All operations are still infix.  This might seem a little odd, but I find it works quite well.  You have the stack for doing some really deep stuff, but its all still infix which just seems more natural. (<small>my opinion anyhows.</small>)</p>

<p>It supports labeling decimal numbers using most of the SI standard labels. (<small>The exception is deka- for which the official label is da, but I use D instead. By doing this all the labels are a single character.</small>)  Decimal and floating point numbers can be labeled, just type the label character in last.  Hex, Oct, and Bin numbers cannot be labeled.  The ‘best’ label for a number can also be calculated.</p>

<p>Numbers of different formats can be typed in at any time.  You do not have to switch to hex mode to insert a hex number.  Flip side to this is that hex, oct, and bin need to be prefixed with 0x, 0o, and 0b.</p>

<p>Screenshots:<br />
<img src="images/tc-mac.png" height="245" width="292" />&nbsp;&nbsp;
<img src="images/tc-win.png" height="316" width="232" /></p>

<p>Download:
 - <a href="/projects/archives/tadpolcalc/tadpolcalc-darwin-univ-aqua-3.zip">Macintosh</a>
 - <a href="/projects/archives/tadpolcalc/tadpolcalc-win32-3.zip">Windows</a>
 - <a href="/projects/archives/tadpolcalc/tadpolcalc-linux-x86-3.zip">Linux</a></p>
      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>Lydkone</title>
    <link href="Lydkone.html"/>
    <id>http://tadpol.org/projects/Lydkone.html</id>
    <published>2009-03-11T20:42:41-05:00</published>
    <updated>2009-05-25T11:14:04-05:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>This is a combination of wanting to do something with my Christmas present, an <a href="http://www.arduino.cc/">Arduino</a>, and something from a dream.  I really don&#8217;t remember much else from the dream, but there was this musical instrument that stuck.  The whole dream had a style that was quite the cross of <a href="http://en.wikipedia.org/wiki/Riven">Riven</a> and <a href="http://steampunkworkshop.com/">Steampunk</a>.  </p>

<p>The Lydkone, this musical instrument, worked by altering the ripples in the flow of æther. (<small>well, the equivalent to æther in this frame, but I&#8217;m calling æther just for ease.</small>) These ripples then resonated through pipes, a bit like a pipe organ.  There were five keys that each routed to an output pipe, a limit only to the inexperienced player.  By moving one&#8217;s hand across the input port that gathered æther, the over all amount of æther available could be adjusted, affecting the pitch of all five notes.  Still there was never enough æther to drive all five pipes at once; the best a quality Lydkone could drive was three.</p>

<p>Now while I am pretty sure that the dream-mechanics that drove the instrument don&#8217;t exist in this frame of reality, faking it with a synth should be quite straightforward.  Which takes us back to the <a href="http://www.arduino.cc/">Arduino</a>.  So five fixed keys, one variable hand-wavy-thing, and three note or voice output, then wrap it all in a pretty case.  And somewhere along the way, learn how to play it.  (<small>such fun!</small>)</p>

<h3>Making Sound</h3>

<p>First thing is to figure out how to make sound with the <a href="http://www.arduino.cc/">Arduino</a>.  Fortunately, there are many different ways of doing this, and have been well <a href="http://www.uchobby.com/index.php/2007/11/11/arduino-sound-part-1/">covered by others</a>.  After pondering the choices (<small>PWM, <a href="http://www.ikalogic.com/dac08.php">R2R</a> DAC, Hardware DAC, Voltage Controlled Oscillators, Synthesizer Chip, MIDI, MP3 Decoder Chip</small>). I decided on using a handmade <a href="http://www.ikalogic.com/dac08.php">R2R</a> DAC with three DACs, each at four bits, largely because I wanted try out building my own DAC.  While having only four bits of resolution will chop up the sound a bit, it will be sufficient enough for my use. Besides, the fuzziness will add some character to the instrument.  This also uses nearly all of the digital lines on the <a href="http://www.arduino.cc/">Arduino</a>, which is fine for this project.</p>

<p>So I made a quick stop at Radio Shack for resistors and spent some time to populate the <a href="http://www.ladyada.net/make/pshield/">Proto Shield</a>.  This did mean that the resisters in the <a href="http://www.ikalogic.com/dac08.php">R2R</a> are not perfectly R and 2R, but its close enough.
<br />
<a href="images/Lydkone-output-prototype.jpg" class="thickbox" rel="projectsLydkonehtml"><img src="images/Lydkone-output-prototype-thumb.jpg" height="240" width="320" /></a></p>

<p>Once I was convinced that the hardware would work, I got another <a href="http://www.ladyada.net/make/pshield/">Proto Shield</a> and soldered things down.
<br />
<a href="images/Lydkone-output.jpg" class="thickbox" rel="projectsLydkonehtml"><img src="images/Lydkone-output-thumb.jpg" height="240" width="320" /></a></p>

<p>With the output hardware all finished up, I need some software to drive it.  This took a bit because my initial design was based on having a single sample, and bending the pitch in the <a href="http://www.arduino.cc/">Arduino</a> for each DAC to get the different notes; that is three concurrent pitch bends at once.  There were many failed implementations trying to do this.  Finally, I changed my design to have five samples, one for each note.  The initial implementation of this new design worked as desired the first time.  Good thing to keep in mind; if things are going too tough, try doing it differently.</p>

<p>Within the trials of getting the output software written, there was the small issue of which notes to use.  This turned out to be an easy pick.  There are five keys so use a <a href="http://www.phy.mtu.edu/~suits/pentatonic.html">pentatonic</a> scale.  This is somewhat superficial, since it is really just five samples in the code that happen to be the same waveform at the five pitches.  I picked a simple sawtooth wave for initial testing.  At a later date, I&#8217;d like to change it to something a little more complex.</p>

<h3>Controlling</h3>

<p>As stated above, playing the Lydkone is done with five keys with a <a href="http://en.wikipedia.org/wiki/Thermin">theremin</a> like pitch adjust.  The easiest way to do the pitch adjust is with a <a href="http://www.makingthings.com/teleo/teleo/cookbook/photocell.htm">photocell</a> and an analog read.  The easiest route for the keys is to use switches, but that gives a very binary action to the playing.  The Lydkone is supposed to be an analog machine, so using pressure sensors for each key gives the kind of response that will be expected.  This is workable, since the <a href="http://www.arduino.cc/">Arduino</a> gives us six analog inputs and this will use them all. (<small>should use them up anyways, otherwise it is like wasting them or something.</small>)</p>

<p>Pressure sensors run about $5 or more a piece, and I&#8217;m no too keen at this point to be spending that much on sensors.  Making your own pressure sensor is quiet straightforward.  Take some conductive foam and some copper clad pcb. Then add wires a a small touch of glue to hold it together.  TaDa! Pressure sensors:
<br />
<a href="images/Lydkone-pressure-sensors.jpg" class="thickbox" rel="projectsLydkonehtml"><img src="images/Lydkone-pressure-sensors-thumb.jpg" height="240" width="320" /></a></p>

<p>Now one twist left for these: sampling.  Running the ADC takes time, but we want this to be quite responsive.  It is not good if it takes a second or more after pressing a key to get sound.  Actually, it is not good if it takes more than a couple hundred milli-seconds.  So if we use the stock <code>analog_read()</code> function, it takes about 600 to 700 milli-seconds to read all of the ADCs.  That is simply too long.  This is because while there are 6 ADC inputs, there is actually only one ADC.</p>

<p>There are two things that the data sheet clues us into to help deal with this.  First is an interrupt that fires when the ADC is complete; the second is free running mode.  Free running automatically restarts the ADC when it finishes, so we won&#8217;t loose cycles restarting.  Then in the interrupt, we save the result and advance to the next ADC input.  We let this run in the background, and pull out the saved values when we need them.  With this, it takes 6 to 7 micro-seconds to read all ADC inputs.  Quite an improvement.</p>

<p>To get the best results from our analog sensors, we want them to span the nearly the entire range of voltage that the ADC can take.  Default for the <a href="http://www.arduino.cc/">Arduino</a> is 0 to 5 volts.  This is done with a simple <a href="http://en.wikipedia.org/wiki/Voltage_divider#Resistive_divider">voltage divider</a>.  You can make either R<sub>1</sub> or R<sub>2</sub> adjustable, I chose R<sub>2</sub> because it made the layout on the <a href="http://www.ladyada.net/make/pshield/">proto-board</a> easier.  After a little spreadsheet work, I found that a good value for R<sub>1</sub> is about midpoint of the range of R<sub>2</sub>.
<br />
<a href="images/Lydkone-voltage-divider.jpg" class="thickbox" rel="projectsLydkonehtml"><img src="images/Lydkone-voltage-divider-thumb.jpg" height="240" width="320" /></a></p>

<p>Then I discovered the biggest hurdle of homemade sensors, that each one is different.  This is true with any kind of sensor actually; it just seems a bit exaggerated with homemade ones.  The upside is that this can be completely handled in software.  I already need to map the range of the ADC output to a useful volume range.  So now instead of mapping from the entire ADC range, I just use a subset range of what a given sensor actually produces.</p>

<p>There are a couple of ways of doing sensor calibration.  One way is to do some extensive testing of your sensors by logging the data so you can do some analysis and incorporate that results into the program.  Another is to add some kind of calibration code to the program that basically does all of the logging and analysis for you.  This is usually done either at startup or a &#8216;lets enter calibrate mode&#8217; button.  This is a nice method because if things change, and they will change, you can re-calibrate to adjust for those changes.</p>

<p>I decided to take it one step further and calibrate all the time.  This works for this specific case because all that is being recorded for calibration is the maximum and minimum value seen from each sensor.  So every time it checks the saved ADC values, it also checks if it is a new max or min.  If it is, the new value is recorded.  If I wanted, I could have also saved these into EEPROM so that they wouldn&#8217;t be lost when the power is removed.  However this calibration is easy and quick enough that I didn&#8217;t bother.</p>

<p>A final detail is that there should be at most three notes playing, no matter how many keys are pressed.  This is very easy to do in software, just stop when it fills the third voice.  In my current implementation, this means if you press all five keys, only the first three notes play.  Pretty much a non-issue, since a majority of the time, I only expect that one or two keys will be pressed.</p>

<h3>Encased</h3>

<p>A pile of wires and circuit boards is not very fitting to the style themes of <a href="http://en.wikipedia.org/wiki/Riven">Riven</a> or <a href="http://steampunkworkshop.com/">Steampunk</a> much less a blend of the two.  So a proper case will need to be made.  However, given my current somewhat transitory status, this is something that will have to wait.  I am not thrilled with this, but it is what it is.</p>

<h3>How does it Sound?</h3>

<p>Here is a quick sound test.  You&#8217;ll need to turn it up a bit, since there is only a buffer and no amp. It is very quiet.  (<small>I tried unsuccessfully a couple of times to put together a LM386 amp, not sure what I&#8217;m messing up there, but hey, I tried.</small>)
<br />
<a href="/projects/images/Lydkone-sound-test.mov"><img src="images/Lydkone-sound-test-thumb.jpg" height="240" width="320" /></a></p>

<p><a href="images/Lydkone-allwires.jpg" class="thickbox" rel="projectsLydkonehtml"><img src="images/Lydkone-allwires-thumb.jpg" height="240" width="320" /></a></p>

<p>When I started this, I really didn&#8217;t understand how sound generation worked at all.  Now that I&#8217;ve gone through this, I think the only real change I would make is to have a single eight or twelve bit R2R. Then just do the mixing inside the <a href="http://www.arduino.cc/">Arduino</a>, rather than having three four bit R2R&#8217;s and having them mixed electrically.  (<small>It wouldn&#8217;t be too hard to convert this construction&#8230; Maybe some other time.</small>)</p>

<h3>Data</h3>

<p><a href="images/Lydkone-Schematic.png" class="thickbox" rel="projectsLydkonehtml"><img src="images/Lydkone-Schematic-thumb.png" height="147" width="133" /></a>
<br />
<a href="/projects/archives/lydkone.zip">SRC</a></p>
      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>Dice Stacker</title>
    <link href="dice_stacker.html"/>
    <id>http://tadpol.org/projects/dice_stacker.html</id>
    <published>2007-06-27T10:23:16-05:00</published>
    <updated>2009-02-19T07:49:36-06:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>A robot that will stack a tower of dice.
<img src="images/NXT-DS-v1.jpg" height="120" width="160" /></p>

<p>Original plan was to have the arm carry all of the dice with it and place them. Similar to an applicator tip in a machine like <a href="http://reprap.org/">RepRap</a>.  Played with a lot of ideas, but they all ended up either using too many parts, or being too heavy, or usually, both.  So I changed my plan to work more like a Pick-n-Place, which makes it just a claw.  Then needed to make a small claw that would sufficiently grab dice and carry them.
<img src="images/NXT-DS-claw-v1.jpg" height="120" width="160" /></p>

<p>What I came up with works well enough.  There is however a bit of slack from the totaled gap space of all the gears between the pincers and the motor.  I&#8217;ve been able to deal with it so far just by keeping it in mind while writing programs.  (<small>mostly by putting in enough extra degrees.</small>) Though I&#8217;m curious if there is a design that will work with less floating space.</p>

<p>The other challenge was that to stack dice I needed to have near, if not complete, vertical motion of the claw tip.  Otherwise the dice wouldn&#8217;t be placed on top of each other and the tower would fall.  Also would be nice to have lots of vertical range.  After messing around with lots of unusable ideas, then scouring the web, I came across a model of a <a href="http://www.telepresence.strath.ac.uk/jen/lego/skidsteer.htm">skid-loader</a>.  Which had the linkages for the near vertical motion I was after.  So copied and tweaked it, and built it in.
<img src="images/NXT-DS-vert-v1.jpg" height="120" width="160" /></p>

<p>I would also have liked to get near horizontal motion as well, but I was getting impatient here.  So just used the base from the RoboArm T-56 that came with the NXT.  This works well enough, although due to the way it is built, turning the arm also raises or lowers the tip a bit.  After a bit of testing, I figured that about four seconds of rotation equaled about one rotation of lift.  Also, rotating right produced lift, while rotating left lowers the tip.</p>

<p>After many trials and errors, I came up with a program that worked for a tower of two dice.  Then after a bunch more runs, I got one captured in quicktime.  There is a lot of float in the system, which would be less noticeable if I had bigger dice. (<small>They&#8217;re 7/16 of an inch to a side.</small>)  So accuracy is a bit of luck and repetition.</p>

<p><a href="images/side_view.mov">In action here.</a></p>

<p>The program: <a href="archives/NXT-DS-v2.zip"><img src="images/NXT-DS-prgm-v2.png" height="44" width="287" /></a></p>

<p><strong>Update 2007-06-28T18:01:01-05:00</strong>: Improved the program to work with towers of different heights.  You still need to edit the program to tell it how high the tower is, but there is only one spot where you need to do that.</p>

<p><strong>Update 2007-06-29T18:11:56-05:00</strong>: Changed the <a href="images/NXT-DS-claw-v2.jpg">pincer design</a> to use the lever idea instead of gears.  Nearly no float in this design; works much better than with gears.  I don&#8217;t have to do any compensation in the code for the pincers now.</p>
      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>LCD-clamp</title>
    <link href="LCD-CLamp.html"/>
    <id>http://tadpol.org/projects/LCD-CLamp.html</id>
    <published>2000-01-01T12:00:00-06:00</published>
    <updated>2009-02-18T08:01:21-06:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">

<p>This is no longer supported.  It is left here 
for archival purposes.</p>

<h2>LCD-clamp for BeOS</h2>

<p>Little visual plug-in for
<a href="http://www4.tripnet.se/~slarti/f_cl-amp_uk.htm">CL-Amp</a>, just
puts up the current playback stats onto a LCD panel attach to a serial
port.  Uses the
<a href="http://www.bebits.com/app/664">SerLCD</a>
support libs to drive the LCD.  Works great with the Serial backpacks from
<a href="http://www.seetron.com/slcds.htm">Scott Edwards Electronics</a>.</p>

<p>Some screen shots to entertain and tempt you:<br />
<a href="images/lcdclamp1.jpg">First</a><br />
<a href="images/lcdclamp2.jpg">Second</a><br />
Or even an <a href="images/lcdclamp.avi">avi</a> to see it in action.
</p>
<p><a href="archives/lcd-clamp.zip">Download it</a></p>

<p>
This was the start of what was going to be a Stereo component type thing.
It was going to be able to play anything that CLamp supported.  This is the
display part.  I have various bits of code laying around that parsed the
codes from a X10 MouseMan remote. (Big 6-in-1 remote that can control your
mouse and send extra signals for the other buttons. Comes with software to
control winamp.)  I gave up on this because I spent too much time fighting
BeOS. (Be's mouse driver always got loaded on the serial port before this
one did.  I couldn't figure out a way to stop Be's mouse driver from
grabbing it first. But still grab the regular mouse.)
</p>
<p>
If you want to play with the <a href="archives/lcdclampremotecode.zip">remote code</a>,
 go ahead, I think I remember it
kinda working, but that was a while ago.  And the only thing I've done with 
this code since is clean up the folders it is in and pack it up to put here.
</p>

      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>Visualizing Routes</title>
    <link href="Visualizing_Routes.html"/>
    <id>http://tadpol.org/projects/Visualizing_Routes.html</id>
    <published>2008-12-14T09:04:19-06:00</published>
    <updated>2008-12-22T19:16:53-06:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>I hit a curious question for myself one day while driving to work.  It seemed that no matter what time I left home, I got to work at nearly the same time.  The idea being that traffic was such that it somehow normalized my arrival time.  This puzzled me for a bit before I decided that the best way to deal with this quandary, was to test it.  Easily done since I have a little GPS unit.</p>

<p>Armed with my <a href="http://www.garmin.com">Garmin</a>, I logged five weeks of driving to work.  This gave me a pile of data, so now what.  I played with a few tools, <a href="http://earth.google.com">Google Earth</a> and the like, but none of these gave the information I wanted. Those that came close, wouldn&#8217;t present multiple data points in any way readable.  Yeah for me; I get to write a tool.</p>

<p>I chose <a href="http://tcl.tk">TCL/TK</a> this time. (<small><a href="http://www.equi4.com/tclkit/">tclkit</a> to be precise.</small>) Partly because I have been finding it to be one of the cleaner cross-platfrom languages. Partly because of <a href="http://www.equi4.com/tclkit/">Tclkit</a>.  And mostly because you can use it without installing it.  Download the interpreter and go.  If you need some extensions, make a lib directory, drop them in there and append the auto_path.  That&#8217;s all; a significantly easier process that most other languages. (<small>well, <a href="http://lua.org">Lua</a> goes nearly as well, but doesn&#8217;t seem to have a good gui kit yet.</small>)  All that and I like the BSD license.</p>

<p>Anyways, I knew that the most important bit on information I wanted gleaned from my data was the start and finish times.  Anything else would just be neatness.  First I had to get the data out, quite easy to do with <a href="http://www.tdom.org">tdom</a>, so no worries there.  Then what to do with the data?  A bit of poking and I decided that using a tabular view would be best.  (<small>Which brought wonderings on how spreadsheets would handle XML data, but I didn&#8217;t feel like investigating that.</small>)  So a bunch more poking, and I found <a href="http://www.nemethi.de/">tablelist</a>, which turned out be be an awesome find.  </p>

<p>The basic start stop time was right in the time stamps, so that was easy.  So I had to add a bit more info.  I wanted distance and speed.  Speed would fall into place once I had distance, so easy there.  Now getting the distance, in miles, from latitude and longitude data seemed like it was going to be a lot more difficult.  Turns out to be quite simple, you use the <a href="http://en.wikipedia.org/wiki/Haversine_formula">Haversine Formula</a>.  So now I had the information I wanted out of my data.</p>

<p>This was too easy.  So I added a very basic plot that was colored by speed, just because I could.  I thought about tying a image of the roads into the plot, but I never really got around to it.  As far as my original question, well, I&#8217;m not sure.  The current data sample is inconclusive.  I could find no collations between when I left, how long it took me, and when I arrived.</p>

<p>But I had fun playing with the data and building this tool, so it was a net gain.</p>

<p><a href="../images/routeMapViewerWXP.png" class="thickbox" rel="projectsVisualizing_Routeshtml"><img src="../images/routeMapViewerWXPs.png" height="101" width="135" /></a><br />
(<small>I also was too lazy to compile <a href="http://www.tdom.org">tdom</a> for MacOSX, and just ran XP inside of <a href="http://www.virtualbox.org">VirtualBox</a>. Just in case you&#8217;re wonding about the screenshot here.</small>)</p>

<p>Silly me forgot to put this up first time around, but <a href="http://tadpol.org/projects/archives/routeMap.tcl.zip">here is the code</a>.</p>
      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>HTMLtoRSS</title>
    <link href="htmltorss.html"/>
    <id>http://tadpol.org/projects/htmltorss.html</id>
    <published>2005-01-10T19:00:05-06:00</published>
    <updated>2008-07-16T20:13:50-05:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">

<p>
This script is for <a href="http://ranchero.com/netnewswire/beta.php">NetNewsWire 2.0</a>.
This will, more or less, turn any web page into a news feed.  When ran,
it checks to see if the page has changed.  If it has, it makes a new
feed entry with the page.
</p><p>
This script wants ruby version 1.6 or later. (Ruby 1.6 is included with
MacOS 10.3.7, possibly other versions of 10.3.)
</p>
<p>I use this script for web comics.  There are so many nifty ones that
only update when the authors have time that it just sucks to continually
check the page.  So I wrote this script.
</p>

<p>This is kind of a beta version, there is still work to do.  But I thought 
I&#8217;d share it now anyways. (<small>It does mostly work. for me.</small>)  
Besides, its for a beta version of NNW anyways.
</p>

<p>Needed a little tweek to run on Lepord. Thanks to Ben Flaumenhaft for sending me the fix.</p>

<p>
Download: <a href="archives/htmltorss-0.5.zip">0.5</a>
</p>

      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>Three's for the NDS</title>
    <link href="Three_s_for_the_NDS.html"/>
    <id>http://tadpol.org/projects/Three_s_for_the_NDS.html</id>
    <published>2007-11-13T20:10:23-06:00</published>
    <updated>2007-11-29T19:41:38-06:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p>This is a port of my game <a href="http://tadpol.org/projects/threes.html">Three&#8217;s</a> to the <a href="http://www.nintendo.com/systemsds">Nintendo DS</a>.  Since I was mostly just messing around, I wanted to keep development simple.  So I chose to use the <a href="http://dslua.com">DSLua</a> stuff instead of setting up a cross-compiling environment for the <a href="http://www.nintendo.com/systemsds">NDS</a>.  In the grand scheme, I&#8217;m not sure how much this really saved me, since <a href="http://dslua.com">DSLua</a> is pretty low level.  I still had to get the hang of many inner detail stuff.  Even so, it worked out well, since it gave me a good excuse to learn <a href="http://lua.org">lua</a>.</p>

<p>The two biggest issues where that I learned <a href="http://lua.org">lua</a> v5.1 first, then discovered that <a href="http://dslua.com">DSLua</a> is built on v5.0.  So I had to unlearn a bunch of stuff.  The other issue was getting images formatted in the right way.  <a href="http://dslua.com">DSLua</a> v0.7 has initial stuff for direct usage of regular image formats, but to really do anything you still need to get into the raw image formats.  That will probably change in the future, but for now it meant figuring out some deep stuff.</p>

<h2>Screenshot</h2>

<p>A truly horrid screen shot done with a cell phone camera.</p>

<p><a href="../images/ndsThreesScreen.jpg" class="thickbox" rel="projectsThree_s_for_the_NDShtml"><img src="../images/ndsThreesThumb.png" height="96" width="128" /></a></p>

<!--
## Requirements and Downloads

To run this you will need:
 - [Nintendo DS][nds], regular or lite.
 - Hardware to run [Homebrew][].  I use the [R4DS][].
 - [DSLua][] v0.7
 - NDS Three's v0.1

Once you've got all that, do some setup verification.  Make sure that the [homebrew][] stuff works, and make sure some of the sample [DSLua][] scripts run.  You need to make sure that [DSLua][] runs before trying to run Three's.

## Install and Run

Unzip, then copy the Threes folder to your card.  Run [DSLua][], and browse to the `threes.lua` file and run it.
-->
      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>extfile</title>
    <link href="extfile.html"/>
    <id>http://tadpol.org/projects/extfile.html</id>
    <published>2005-10-28T14:09:00-05:00</published>
    <updated>2007-09-26T21:04:55-05:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">

<p>I have been playing with moving and coping files across platforms a
bit recently.  Most network file tools don't copy more than just the
data portion of a file.  This is a rather safe behavior, since most of
what moves around the net is just the simple data.  But more and more
systems are adding extended attributes of one kind or another.  Plus the
mac has this resource fork thing that usually gets skipped.</p>

<p>All of this just brought up the question of how does one know when a
file has these extra bits.  I poked around a little and didn't see any
tool that came with the OS. (<small>though I might have just missed it
too.</small>)  So I wrote this.  </p>

<p>It is very short and sweet.  The archive contains the source and a
compiled binary.  I made it a command line tool because that was
quickest, and you can do things like: <code>find ~ -type f -print0 |
xargs -0 extfile -v</code>  Which gives you a list of every file in your
home directory that has either extended attributes or resource fork
data.</p>

<p><a href="archives/extfile.zip">extfile v0.1</a></p>
      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>RSS for core dumps</title>
    <link href="rss_for_core_dumps.html"/>
    <id>http://tadpol.org/projects/rss_for_core_dumps.html</id>
    <published>2006-01-05T10:50:00-06:00</published>
    <updated>2007-09-26T21:04:47-05:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">

<p>Have been doing development work on my mac here lately.  This is a
task that occasionally produces programs with various errors.  Some of
which cause core dumps.  On the Mac these all end up in
<code>/cores/</code> and I tend to forget about them.  Or sometimes it
seems like I don&#8217;t even realize that a core got dumped.  This is
gets rather icky after a while when you start wondering where all of
your disk space is going.  Only to discover that <code>/cores/</code> is
taking up a couple of gigabytes with many core files left there.</p>

<p>So this script looks in that directory, and builds a list of
what&#8217;s there and returns it as a RSS feed.  Which then can be
added to NetNewsWire or some such.</p>

<p><a href="archives/showcores.zip">Download</a></p>
      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>TINI Controlled Fan</title>
    <link href="tinifan.html"/>
    <id>http://tadpol.org/projects/tinifan.html</id>
    <published>2003-07-26T14:50:43-05:00</published>
    <updated>2007-09-26T20:59:25-05:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">

<h1>TINI Controlled Fan</h1>

<p>
Why? I was bored.  Really.  Well, that and I had most of the junk lying
around.  Just asking to be used.  So I guess that had some relevance as
well.
</p><p>
What? The <a href="http://www.ibutton.com/TINI/index.html">TINI</a> is the 
brains.  A 
<a href="http://www.ibutton.com/ibuttons/thermochron.html">Thermochron</a> 
button records the temp inside the apartment.  X10 controls that window
fan.  The TINI looks up the outside temp via internet, and if this temp
is over 60 but less than the inside temp, the window fan is switched on.  Else it is off.
</p><p>
That's the idea anyways.  Maybe in the future I'll rig it with a second
temp sensor to get the actual temp outside my apartment.
</p><p>

Now this is all good and fine until the first stumbling block.  For a
computer to X10 interface, all I have is the Firecracker.  This neat
little block utilizes the DTR and RTS lines to send RF signals to a X10
base that then sends it over the power lines.  The problem then?
</p><p>
The TINI supports four serial lines.  The first two are driven by
internal UARTs and for simplicity, are only RX/TX lines.  And that
rather complicates things if you want to use the DTR and RTS lines.
</p><p>
Good thing is that the other two serial lines will have DTR and RTS
lines.  Too bad that they also require a bunch of other parts.  Well,
its not that bad.  Its just a bunch of stuff that I have to buy, then
sodder. (well, I won't sodder these.  Lots of surface mount stuff.  Got
my brother to do it, since at his work they have spiffy nice equipment
that makes it a snap to do.)
</p>
<p>I've got some pictures of the TINI main board before and after we
added the extra parts.  We added a lot more than just what was needed. 
This is because <a href="http://www.digikey.com/">Digi Key</a> has a minimum order of $25, and the electronic parts were really cheep.
</p>
<p>Before:
<a href="images/tini-before-front.jpg">Front
<img src="images/tini-before-front-thumb.jpg" height="48" align="top" alt="tini-before-front-thumb" width="64" /></a>
<a href="images/tini-before-back.jpg">Back
<img src="images/tini-before-back-thumb.jpg" height="48" align="top" alt="tini-before-back-thumb" width="64" /></a>
<br />
After:
<a href="images/tini-after-front.jpg">Front
<img src="images/tini-after-front-thumb.jpg" height="48" align="top" alt="tini-after-front-thumb" width="64" /></a>
<a href="images/tini-after-back.jpg">Back
<img src="images/tini-after-back-thumb.jpg" height="48" align="top" alt="tini-after-back-thumb" width="64" /></a>
</p>

<p>As a side note to this adventure. While it is true that java on
embedded devices is a neat idea and all in theory.  It makes a great
many things way more difficult than they need to be for a simple application as this.
</p>

<p>I've got all the various parts of code done.  I can turn the fan on
and off.  Get the temp from <a href="http://weather.noaa.gov/">NOAA</a>,
and the Thermochron button.  Just got to roll it all together.  Just need to
stop playing with the web site stuff and get back to playing with this.
</p>

<p><b>Update [<small>Tue Sep 9 17:41:23 CDT 2003</small>]:</b>
bleh.  The code to fetch the data from NOAA via ftp gags once and a
while.  And after running long enough, it will splatter all of the tcp/ip stuff on the TINI.
<br />This is throwing a bit of a wrench into the works.
</p>

      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>TTT - Tadpol's Tea Timer</title>
    <link href="ttt.html"/>
    <id>http://tadpol.org/projects/ttt.html</id>
    <published>2004-10-31T16:45:14-06:00</published>
    <updated>2007-09-26T14:17:12-05:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">

<p>
Just poured hot water over a bunch of tea leaves?  Wondering how long to
let is steep?  So did I.  (<small>Actually I usually left it in the
kitchen and forgot about it.</small>)  Until I wrote this little app. 
Launch it, tell it how long to wait, and go.  After the time, it will
alert you that your tea is ready.  Toss the leaves and enjoy.
</p>
<p>
TTT is built to take advantage of <a href="http://growl.info/">Growl</a>
if you have that installed.  And I really suggest doing that.  Growl is
much nicer than having the dock icon bounce, which TTT can also do.
</p>
<p>
Alot of hype for a timer? well, yeah. But I wanted to learn Cocoa this
weekend, and I could not think of a project.  Then I went to make some
tea.  After setting it up to steep, I wondered back up to my computer. 
Then it occured to me what I could make, a tea timer app.  Prefect for a
first run.  I begain to program and my tea was forgotten until cold.
(<small>See!? I really do need this.</small>)
</p>

<h3>[Update: Thu Nov  4 20:53:41 CST 2004]</h3>
<p>
Added a spinner so you can tell if the timer is actually running or not.
Also cleaned up the source and put that up.
</p>

<p>
Download: <a href="archives/ttt.zip">0.2</a>&nbsp;
<a href="archives/ttt.src.zip">src</a>
</p>

      </div>
    </content>
  </entry>
  <entry xml:base="projects/">
    <title>Old MacWare</title>
    <link href="OldMacStuff.html"/>
    <id>http://tadpol.org/projects/OldMacStuff.html</id>
    <published>1997-08-12T13:42:50-05:00</published>
    <updated>2007-09-12T14:23:32-05:00</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">

<p>These are no longer supported. There are left here
for archival purposes.</p>

<h2>Freeware</h2>
<div class="indt">
<big><b>Clp Convert</b></big>
<p>This application will convert clipping files to either text or pict files
so you can edit them. It also converts text and pict files back into
clipping files.</p>
<p>
Download: <a href="macstuf/ClpConvert.sit.hqx">1.0</a>
 <small>(~29K)</small>&nbsp;&nbsp;
</p>
<br />
<hr width="90%" /><br />
<big><b>GetColor</b></big>
<p>A useful little FKEY that gives you an eyedropper so that you can find the
RGB value of any color you click on. And for all you HTML authors, here
is GetColor's perfect companion,
<a href="macstuf/HexClip.hqx">HexClip</a>(~4K) by
<a href="http://www.usyd.edu.au/~jcj/">Jason Johnston</a>. HexClip will
convert the RGB values in the clipboard to hex values that can be used in
HTML.</p>
<p>
Download: <a href="macstuf/GetColor.hqx">1.2.5</a>
 <small>(~136K)</small>&nbsp;&nbsp;
</p>
<br />
<hr width="90%" /><br />
<big><b>AutoHide</b></big>
<p>Automaticly hides the control strip when the menubar is hidden. Also has a
HotKey for hiding the control strip.<br /> (<small>AutoHide has been
abandoned due to the fact the Extensions Strip now has this functionality
built in.</small>)</p>
<p>
Download: <a href="macstuf/AutoHide.sit.hqx">2.3</a>
 <small>(~6K)</small>&nbsp;&nbsp;
</p>
<br />
<hr width="90%" /><br />
</div>
<h2>Shareware</h2>
<p>These packages are still marked as shareware, but are not locked in any way.  They work the same registered or not.  I have a real job these days, so don't feel that you need to register them.</p>
<div class="indt">
<big><b>Plug Master</b></big>
<p>That Plug-in folder of yours starting to look like your Extensions folder?
Want some control over those Plugs? Well, this application works like
System7.5's Extension Manager, but for your Netscape or Explorer plug-ins
or any other plug-ins you need to master.</p>
<p>
Download: <a href="macstuf/Plug_Master.hqx">1.6.4 US</a>
 <small>(~138K)</small>&nbsp;&nbsp;
<a href="macstuf/Plug_MasterJ.hqx">1.6.4 JP</a>
 <small>(~145K)</small>&nbsp;&nbsp;
<br />Screenshot: <a href="images/PlugMasterscrn.png">MainWindow</a>&nbsp;&nbsp;
</p>
<br />
<hr width="90%" /><br />
<big><b>ScrollBarPAT</b></big>
<p>You are no longer confined to the boring pattern that is in your scroll
bar. This program will let you change the pattern in your scroll bars.
Importing new patterns from other programs and files gives you an unlimited
supply of patterns to choose from. <br /><b>This program does not work with
MacOS 8 or newer.</b></p>
<p>
Download: <a href="macstuf/ScrollBarPAT.hqx">1.4.1</a>
 <small>(~120K)</small>&nbsp;&nbsp;
<br />Screenshot: <a href="images/SBPATscrn.png">MainWindow</a>&nbsp;&nbsp;
</p>
<br />
<hr width="90%" /><br />
</div>
<h2>Public Domain</h2>
<div class="indt">
<big><b>Switch HTML Site...</b></big>
<p>
This AppleScript is an attempt to make managing multiple sites with the
commercial version of BBEdit easier. It presents a dialog similar to the
HTML one in the preference window, but also has a list of site prefs along
the side.</p>
<p>
Download: <a href="macstuf/Switch_HTML_Site.sit.hqx">1.0</a>
 <small>(~36K)</small>&nbsp;&nbsp;
</p>
<br />
<hr width="90%" /><br />
<big><b>WhatURLIADs</b></big>
<p>
Nothing to fancy about these, just a bunch of Actions for Apple's Internet
Data Detectors. Each file will bookmark that type of data in WhatURL!?.</p>
<p>
Download: <a href="macstuf/WhatUrlIADs.sit.hqx">1.0</a>
 <small>(~19K)</small>&nbsp;&nbsp;
</p>
<br />
</div>
      </div>
    </content>
  </entry>
</feed>
